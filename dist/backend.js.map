{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"fluture\"","webpack:///./utils/helpers.js","webpack:///external \"express\"","webpack:///external \"sanctuary\"","webpack:///external \"mongoose\"","webpack:///external \"fluture-sanctuary-types\"","webpack:///./middleware/auth.js","webpack:///./models/Users.js","webpack:///external \"bcryptjs\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"path\"","webpack:///./routes/api/users.js","webpack:///./routes/api/auth.js","webpack:///./models/Planets.js","webpack:///./routes/api/planets.js","webpack:///./models/Posts.js","webpack:///./routes/api/posts.js","webpack:///./server.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","model","secret","S","checkTypes","env","concat","flutureEnv","toMaybe","x","Nothing","Just","eitherToFuture","either","Future","reject","of","maybeToFuture","left","compose","maybeToEither","getUser","User","params","rej","res","findOne","then","checkUnique","user","chain","maybe","Right","_","Left","status","message","eitherNewUser","salt","encaseN","bcrypt","genSalt","hash","encaseN2","saltAndHash","pw","save","genToken","process","JWT_SECRET","encaseN3","jwt","sign","id","prop","expiresIn","auth","req","next","token","header","json","msg","decoded","verify","err","UserSchema","Schema","mongoose","type","String","required","email","unique","password","register_date","default","Date","now","router","express","Router","post","body","map","bimap","fork","e","obj","compare","unhashed","_id","findById","select","PlanetSchema","Planet","find","exec","planets","end","planet","deleteOne","success","PostSchema","authorId","title","maxlength","createdAt","Post","savePost","returnedPosts","patch","findByIdAndUpdate","new","updatedPost","port","PORT","app","uri","MONGODB_URI","dbOptions","eventualConnection","connect","options","main","startDBIfCommandline","mainModule","console","error","log","use","send","NASA_API_KEY","usersRouter","planetsRouter","authRouter","postRouter","sendFile","path","resolve","__dirname","isJust","isMain","listen","startServerIfCommandline"],"mappings":"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","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","module.exports = require(\"fluture\");","/* eslint-env es6, node */\n// Import dependencies\nimport bcrypt from 'bcryptjs'\nimport jwt from 'jsonwebtoken'\nimport Future from 'fluture'\nimport {env as flutureEnv} from 'fluture-sanctuary-types'\nimport {create, env} from 'sanctuary'\n\nconst S = create ({// Initialize type environment\n  checkTypes: true,\n  env: env.concat (flutureEnv),\n})\n\nimport User from '../models/Users'\n\n// toMaybe :: a -> Maybe a\nexport const toMaybe = x => x === null || x === undefined ? S.Nothing :\n  /* otherwise */                                           S.Just (x)\n\n// eitherToFuture :: Either e r -> Future e r\nexport const eitherToFuture = S.either (Future.reject) (Future.of)\n\n// maybeToFuture :: b -> Maybe a -> Future b a\nexport const maybeToFuture = left => S.compose\n  (eitherToFuture)\n  (S.maybeToEither (left))\n\n// getModel :: String -> {} -> Future Error (Maybe {})\nexport const getModel = model => params => Future ((rej, res) => {\n  model\n    .findOne ({...params})\n    .then (S.compose (res) (toMaybe))\n    .catch (rej)\n})\n\n// getUser :: {} -> Future Error (Maybe {})\nexport const getUser = getModel (User)\n\n// eitherNewUser :: {} -> Maybe {} -> Either String {}\nconst eitherNewUser = user => S.maybe\n  (S.Right ({...user}))\n  (_ => S.Left ({\n    status: 400,\n    message: 'User already exists',\n  }))\n\n// checkUnique :: {} -> String -> Future Error {}\nexport const checkUnique = user => S.compose\n  (S.chain (S.compose (eitherToFuture) (eitherNewUser (user))))\n  (getUser)\n\n// salt :: Number -> Future Error String\nconst salt = Future.encaseN (bcrypt.genSalt)\n\n// hash :: String -> String -> Future Error String\nconst hash = Future.encaseN2 (bcrypt.hash)\n\n// saltAndHash :: Number -> String -> Future Error String\nexport const saltAndHash = n => pw => salt (n).chain (hash (pw))\n\n// save :: {} -> Future Error {}\nexport const save = user => Future ((rej, res) => {\n  user.save ().then (res).catch (rej)\n})\n\n// signToken :: String -> {} | nil -> {} -> Future Error String\nexport const signToken = secret => params => user => Future.encaseN3\n  (jwt.sign)\n  ({id: S.prop ('id') (user)})\n  (secret)\n  (params)\n\n// genToken :: {} -> Future Error String\nexport const genToken = signToken (process.env.JWT_SECRET) ({expiresIn: 3600})\n","module.exports = require(\"express\");","module.exports = require(\"sanctuary\");","module.exports = require(\"mongoose\");","module.exports = require(\"fluture-sanctuary-types\");","/* eslint-env es6, node */\nimport jwt from 'jsonwebtoken'\n\nconst auth = (req, res, next) => {\n  const token = req.header ('x-auth-token')\n\n  if (!token) {\n    return res.status (401).json ({msg: 'No token, authorization denied'})\n  }\n\n  try {\n    const decoded = jwt.verify (token, process.env.JWT_SECRET)\n    req.user = decoded\n    next ()\n  } catch (err) {\n    res.status (400).json ({msg: 'Token is not valid'})\n  }\n}\n\nexport default auth\n","import mongoose from 'mongoose'\nconst Schema = mongoose.Schema\n\nconst UserSchema = new Schema ({\n  name: {\n    type: String,\n    required: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  register_date: {\n    type: String,\n    default: Date.now,\n  },\n})\n\nconst User = mongoose.model ('user', UserSchema)\n\nexport default User\n","module.exports = require(\"bcryptjs\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"path\");","// Import dependencies\nimport express from 'express'\nimport {env as flutureEnv} from 'fluture-sanctuary-types'\nimport {create, env} from 'sanctuary'\n\nimport {\n  checkUnique,\n  genToken,\n  saltAndHash,\n  save,\n} from '../../utils/helpers'\n\nconst router = express.Router ()   // Initialize router\nconst S = create ({// Initialize type environment\n  checkTypes: true,\n  env: env.concat (flutureEnv),\n})\n\nimport User from '../../models/Users'\n\n// @route POST /api/users\n// @desc Register new users\n// @access Public\nrouter.post ('/', (req, res) => {\n  const {name, email, password} = req.body\n\n  if (!name || !email || !password) {\n    res.status (400).json ({msg: 'Please enter all fields'})\n  }\n\n  const eventualToken = checkUnique ({password}) ({email})\n    .map (S.prop ('password'))\n    .chain (saltAndHash (13))\n    .map (pw => new User ({name, email, password: pw}))\n    .chain (save)\n    .chain (r => genToken (r)\n      .bimap (\n        _ => ({status: 400, message: 'Error signing token'}),\n        token => ({\n          token,\n          user: {name: r.name, email: r.email, password: r.password},\n        }))\n    )\n\n  eventualToken\n    .fork (\n      e => res.status (e.status).json ({msg: e.message}),\n      obj => res.json (obj)\n    )\n})\n\nexport default router\n","import express from 'express'\nconst router = express.Router ()\nimport bcrypt from 'bcryptjs'\nimport * as Future from 'fluture'\nimport {env as flutureEnv} from 'fluture-sanctuary-types'\nimport {create, env} from 'sanctuary'\nimport {\n  getUser,\n  genToken,\n  maybeToFuture,\n  toMaybe,\n} from '../../utils/helpers'\n\nconst S = create ({checkTypes: true, env: env.concat (flutureEnv)})\n\nimport auth from '../../middleware/auth'\nimport User from '../../models/Users'\n\n// compare :: String -> String -> Future Error Boolean\nexport const compare = Future.encaseP2 (bcrypt.compare)\n\n// validateUser :: String -> {} -> Future Error {}\nexport const validateUser = unhashed => user => S.compose\n  (S.compose\n    (S.chain (x => x ? Future.of (user) :\n       /* otherwise */ Future.reject ({\n         status: 400,\n         message: 'Invalid credentials',\n       })))\n    (compare (unhashed)))\n  (S.prop ('password')) (user)\n\n// getUserById :: String -> Future (Maybe {})\nconst getUserById = id => Future.Future ((rej, res) => {\n  User\n    .findById ({id})\n    .select ('-password')\n    .then (toMaybe (res))\n    .catch (rej)\n})\n\n// @route  POST /api/auth\n// @desc   Authorize user\n// @access Public\nrouter.post ('/', (req, res) => {\n  const {email, password} = req.body\n\n  // Simple validation\n  if (!email || !password) {\n    res.status (400).json ({msg: 'Please enter all fields'})\n  }\n\n  const eventualResponse = getUser ({email})\n    .chain (maybeToFuture ({status: 400, message: 'User does not exist'}))\n    .chain (validateUser (password))\n    .chain (r => genToken (r)\n      .bimap (\n        _ => ({status: 400, message: 'Error signing token'}),\n        token => ({token, user: {id: r._id, name: r.name, email: r.email}})))\n\n  eventualResponse\n    .fork (\n      e => res.status (e.status).json ({msg: e.message}),\n      obj => res.json (obj)\n    )\n})\n\n// @route  GET /api/auth/user\n// @desc   Get user data\n// @access Private\nrouter.get ('/user', auth, (req, res) => {\n  const eventualResponse = getUserById (req.user.id)\n    .chain (maybeToFuture ({status: 400, message: 'User not found'}))\n\n  eventualResponse\n    .fork (\n      e => res.status (e.status).json ({msg: e.message}),\n      obj => res.json (obj)\n    )\n})\n\nexport default router\n","import mongoose from 'mongoose'\nconst Schema = mongoose.Schema\n\nconst PlanetSchema = new Schema ({\n  name: {\n    type: String,\n    required: true,\n  },\n})\n\nconst Planet = mongoose.model ('planet', PlanetSchema)\n\nexport default Planet\n","// Import modules\nimport express from 'express'\nconst router = express.Router ()\n\n// Import models\nimport Planet from '../../models/Planets'\n\n// @route   GET /api/planets\n// @desc    Get planets from db\n// @access  Public\nrouter.get ('/', (req, res) => {\n  Planet.find ().exec ((err, planets) => {\n    if (err) {\n      res.end (err)\n    }\n    res.json (planets)\n  })\n})\n\n// @route    POST /api/planets\n// @desc     Add new planet\n// @accesss  Public\nrouter.post ('/', (req, res) => {\n  const newPlanet = new Planet ({\n    name: req.body.name,\n  })\n\n  newPlanet.save ().then (planet => res.json (planet))\n})\n\n// @route   DELETE /api/planets/:id\n// @desc    Delete a planet\n// @access  Public\nrouter.delete ('/:id', (req, res) => {\n  Planet\n    .deleteOne ({_id: req.params.id})\n    .then (res => res.json ({success: true}))\n    .catch (err => res.json ({success: false}))\n})\n\nexport default router\n","import mongoose from 'mongoose'\nconst Schema = mongoose.Schema\n\nconst PostSchema = new Schema ({\n  authorId: {\n    type: String,\n    required: true,\n  },\n  title: {\n    type: String,\n    required: true,\n  },\n  body: {\n    type: String,\n    maxlength: 5000,\n    required: true,\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n})\n\nconst Post = mongoose.model ('post', PostSchema)\n\nexport default Post\n","import express from 'express'\nconst router = express.Router ()\n\nimport Post from '../../models/Posts'\n\n// Import middlware\nimport auth from '../../middleware/auth'\n\n// @route POST /api/posts\n// @desc  Create new post\n// @access Private\nrouter.post ('/', auth, (req, res) => {\n  const {\n    title,\n    body,\n  } = req.body\n\n  const authorId = req.user.id\n\n  const newPost = new Post ({\n    title,\n    body,\n    authorId,\n  })\n\n  // Save new post\n  newPost\n    .save ()\n    .then (savePost => {\n      res.json (savePost)\n    })\n    .catch (err => {\n      res.status (400).json ({msg: 'Error saving post'})\n    })\n})\n\n// @route   GET /api/posts/user\n// @desc    Get array of posts by user\n// @access  Private\nrouter.get ('/user', auth, (req, res) => {\n  Post.find ({authorId: req.user.id})\n    .exec ((err, returnedPosts) => {\n      if (err) {\n        res.end (err)\n      }\n      res.json (returnedPosts)\n    })\n})\n\n// @route   DELETE /api/posts/:id\n// @desc    Delete post\n// @access  Private\nrouter.delete ('/:id', auth, (req, res) => {\n  Post\n    .deleteOne ({_id: req.params.id})\n    .then (res => res.json ({success: true}))\n    .catch (err => res.json ({success: false}))\n})\n\n// @route   PATCH /api/posts/edit\n// @desc    Edit post\n// @access  Public\nrouter.patch ('/edit', auth, (req, res) => {\n  Post\n    .findByIdAndUpdate (\n      req.body._id,\n      {title: req.body.title, body: req.body.body},\n      {new: true}\n    )\n    .then (updatedPost => {\n      res.json (updatedPost)\n    })\n    .catch (err => res.status (400).json ({msg: 'Error updating post'}))\n})\n\nexport default router\n","// Import modules\nimport express from 'express'\nimport mongoose from 'mongoose'\nimport path from 'path'\nimport Future from 'fluture'\nimport {create, env} from 'sanctuary'\nimport {env as flutureEnv} from 'fluture-sanctuary-types'\nimport {maybeToFuture, toMaybe} from './utils/helpers'\n\nconst S = create ({checkTypes: true, env: env.concat (flutureEnv)})\n\n// Import routes\nimport usersRouter from './routes/api/users'\nimport planetsRouter from './routes/api/planets'\nimport authRouter from './routes/api/auth'\nimport postRouter from './routes/api/posts'\n\nconst port = process.env.PORT || 5000\n\nconst isMain = main => S.isJust (toMaybe (main))\n\n// initialize server\nconst app = express ()\n\n// Connect to db\nexport const uri = process.env.MONGODB_URI\n\nexport const dbOptions = {\n  'useNewUrlParser': true,\n  'useCreateIndex': true,\n  'useFindAndModify': false,\n}\n\nconst eventualConnection = Future.encaseN2 (mongoose.connect)\n\nconst startDBIfCommandline = uri =>\n  options =>\n  main => maybeToFuture ('Testing') (toMaybe (main))\n    .chain (_ => eventualConnection (uri) (options))\n\nstartDBIfCommandline (uri) (dbOptions) (process.mainModule)\n  .fork (\n    console.error,\n    _ => console.log ('>>> 🛢  DB connected...')\n  )\n\napp.use (express.json ())\n\napp.get ('/config.js', (req, res) => {\n  res.send (\"const NASA_API_KEY='\" + process.env.NASA_API_KEY + \"'\")\n})\n\n// Add api routers\napp.use ('/api/users', usersRouter)\napp.use ('/api/planets', planetsRouter)\napp.use ('/api/auth', authRouter)\napp.use ('/api/posts', postRouter)\n\napp.use (express.static ('client/dist'))\n\napp.get ('*', (req, res) => {\n  res.sendFile (path.resolve (__dirname, 'client', 'dist', 'index.html'))\n})\n\n// Listen on port\nconst startServerIfCommandline = main => app => port =>\n  isMain (main) ?  S.Just (\n      app.listen (port, _ => console.log (`>>> 📡 Listening on ${port}...`))) :\n    /* otherwise */ S.Nothing\n\nstartServerIfCommandline (process.mainModule) (app) (port)\n"],"sourceRoot":""}