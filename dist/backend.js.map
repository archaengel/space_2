{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"express\"","webpack:///external \"mongoose\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"bcryptjs\"","webpack:///./models/Users.js","webpack:///./middleware/auth.js","webpack:///./server.js","webpack:///external \"path\"","webpack:///./routes/api/users.js","webpack:///external \"nodemailer\"","webpack:///./routes/api/planets.js","webpack:///./models/Planets.js","webpack:///./routes/api/auth.js","webpack:///./routes/api/posts.js","webpack:///./models/Posts.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","mongoose","UserSchema","Schema","type","String","required","email","unique","password","register_date","default","Date","now","User","model","jwt","req","res","next","token","header","status","json","msg","decoded","verify","process","env","JWT_SECRET","user","err","express","app","path","usersRouter","planetsRouter","authRouter","postRouter","uri","MONGODB_URI","connect","then","console","log","catch","message","use","send","NASA_API_KEY","static","sendFile","resolve","__dirname","listen","PORT","router","Router","bcrypt","nodemailer","post","body","findOne","newUser","genSalt","salt","hash","save","savedUser","sign","id","expiresIn","transport","createTransport","port","to","from","subject","html","sendMail","info","Planet","find","exec","planets","end","planet","delete","deleteOne","_id","params","success","PlanetSchema","auth","compare","isMatch","findById","select","returnedUser","Post","title","authorId","savePost","returnedPosts","patch","findByIdAndUpdate","new","updatedPost","PostSchema","maxlength","createdAt"],"mappings":"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","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = require(\"express\");","module.exports = require(\"mongoose\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"bcryptjs\");","const mongoose = require('mongoose')\nconst Schema = mongoose.Schema\n\nlet UserSchema = new Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  register_date: {\n    type: String,\n    default: Date.now\n  }\n})\n\nconst User = mongoose.model('user', UserSchema)\n\nmodule.exports = User\n","const jwt = require('jsonwebtoken')\n\nconst auth = (req, res, next) => {\n  const token = req.header('x-auth-token')\n\n  if (!token) return res.status(401).json({ msg: 'No token, authorization denied' })\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET)\n    req.user = decoded\n    next()\n  } catch (err) {\n    res.status(400).json({ msg: 'Token is not valid' })\n  }\n}\n\nmodule.exports = auth\n","// Import modules\nconst express = require('express')\nconst app = express()\nconst mongoose = require('mongoose')\nconst bcrypt = require('bcryptjs')\nconst jwt = require('jsonwebtoken')\nconst path = require('path')\n\n// Import routes\nconst usersRouter = require('./routes/api/users')\nconst planetsRouter = require('./routes/api/planets')\nconst authRouter = require('./routes/api/auth')\nconst postRouter = require('./routes/api/posts')\n\n// Connect to db\nconst uri = process.env.MONGODB_URI\n\nconst dbOptions = {\n  \"useNewUrlParser\": true,\n  \"useCreateIndex\": true,\n  \"useFindAndModify\": false\n}\n\nconst db = mongoose.connect(uri, dbOptions)\n  .then(() => console.log('db connected'))\n  .catch((err) => console.log(err.message))\n\n\napp.use(express.json())\n\napp.get('/config.js', (req, res) => {\n  res.send(\"const NASA_API_KEY='\"+process.env.NASA_API_KEY+\"'\")\n})\n\n// Add api routers\napp.use('/api/users', usersRouter)\napp.use('/api/planets', planetsRouter)\napp.use('/api/auth', authRouter)\napp.use('/api/posts', postRouter)\n\napp.use(express.static('client/dist'))\n\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve(__dirname, 'client', 'dist', 'index.html'))\n})\n\n// Listen on port\napp.listen(process.env.PORT || 5000, () => {\n  console.log(`>>> Listening on ${ process.env.PORT || 5000}...`)\n})\n","module.exports = require(\"path\");","const express = require('express')\nconst router = express.Router()\nconst bcrypt = require('bcryptjs')\nconst jwt = require('jsonwebtoken')\nconst nodemailer = require('nodemailer')\n\nconst User = require('../../models/Users')\n\n// @route POST /api/users\n// @desc Register new users\n// @access Public\nrouter.post('/', (req, res) => {\n  const { name, email, password } = req.body\n\n  if (!name || !email || !password) {\n    res.status(400).json({ msg: 'Please enter all fields' })\n  }\n\n  // Check for existing user\n  User.findOne({ email })\n    .then(user => {\n      if (user) return res.status(400).json({ msg: 'User already exists' })\n\n      const newUser = new User({\n        name,\n        email,\n        password\n      })\n\n      // Create salt and hash\n      bcrypt.genSalt(13, (err, salt) => {\n        bcrypt.hash(newUser.password, salt, (err, hash) => {\n          if (err) throw err\n\n          newUser.password = hash\n          newUser.save()\n            .then(savedUser => {\n              jwt.sign(\n                { id: savedUser.id },\n                process.env.JWT_SECRET,\n                { expiresIn: 3600 },\n                (err, token) => {\n                  if (err) throw err\n\n                  const transport = nodemailer.createTransport({ port: 1025 })\n\n                  const message = {\n                    to: savedUser.email,\n                    from: `no-reply@space_II.com`,\n                    subject: `{ ${savedUser.name} }, please verify your email.`,\n                    html: '<h1>' + token + '</h1>'\n                  }\n\n                  transport.sendMail(message)\n                    .then((info) => {\n                      res.json({\n                        token,\n                        user: {\n                          id: savedUser.id,\n                          name: savedUser.name,\n                          password: savedUser.password\n                        }\n                      })\n                    })\n                    .catch((err) => res.status(400).json({ msg: 'Error sending verification email' }))\n                }\n              )\n            })\n            .catch(err => {\n              res.status(400).json({ msg: 'Error saving user' })\n            })\n        })\n      })\n    })\n    .catch(err => res.status(400).json({msg: 'Error creating user' }))\n})\n\nmodule.exports = router\n","module.exports = require(\"nodemailer\");","// Import modules\nconst express = require('express')\nconst router = express.Router()\nconst mongoose = require('mongoose')\n\n// Import models\nconst Planet = require('../../models/Planets')\n\n// @route   GET /api/planets\n// @desc    Get planets from db\n// @access  Public\nrouter.get('/', (req, res) => {\n  Planet.find().exec((err, planets) => {\n    if (err) {\n      res.end(err)\n    }\n    res.json(planets)\n  })\n})\n\n// @route    POST /api/planets\n// @desc     Add new planet\n// @accesss  Public\nrouter.post('/', (req, res) => {\n  const newPlanet = new Planet({\n    name: req.body.name\n  })\n\n  newPlanet.save().then(planet => res.json(planet))\n})\n\n// @route   DELETE /api/planets/:id\n// @desc    Delete a planet\n// @access  Public\nrouter.delete('/:id', (req, res) => {\n  Planet\n    .deleteOne({ _id: req.params.id })\n    .then(res => res.json({success: true}))\n    .catch(err => res.json({success: false}))\n})\n\nmodule.exports = router\n","const mongoose = require('mongoose')\nconst Schema = mongoose.Schema\n\nlet PlanetSchema = new Schema({\n  name: {\n    type: String,\n    required: true\n  }\n})\n\nmodule.exports = User = mongoose.model('planet', PlanetSchema)\n","const express = require('express')\nconst router = express.Router()\nconst bcrypt = require('bcryptjs')\nconst jwt = require('jsonwebtoken')\n\nconst auth = require('../../middleware/auth')\n\nconst User = require('../../models/Users')\n\n// @route  POST /api/auth\n// @desc   Authorize user\n// @access Public\nrouter.post('/', (req, res) => {\n  const { email, password } = req.body\n\n  // Simple validation\n  if (!email || !password) {\n    res.status(400).json({ msg: 'Please enter all fields' })\n  }\n\n  // Check for existing user\n  User.findOne({ email })\n    .then(user => {\n      if (!user) return res.status(400).json({ msg: 'User does not exist' })\n\n      // Validate password\n      bcrypt.compare(password, user.password)\n        .then(isMatch => {\n          if (!isMatch) return res.status(401).json({ msg: 'Invalid credentials' })\n\n          jwt.sign(\n            { id: user.id },\n            process.env.JWT_SECRET,\n            { expiresIn: 3600 },\n            (err, token) => {\n              if (err) throw err\n              res.json({\n                token,\n                user: {\n                  id: user.id,\n                  name: user.name,\n                  email: user.email\n                }\n              })\n            }\n          )\n        })\n    })\n})\n\n// @route  GET /api/auth/user\n// @desc   Get user data\n// @access Private\nrouter.get('/user', auth, (req, res) => {\n  User.findById(req.user.id)\n    .select('-password')\n    .then(returnedUser => res.json(returnedUser))\n})\n\nmodule.exports = router\n","const express = require('express')\nconst router = express.Router()\n\nconst Post = require('../../models/Posts')\n\n// Import middlware\nconst auth = require('../../middleware/auth')\n\n// @route POST /api/posts\n// @desc  Create new post\n// @access Private\nrouter.post('/', auth, (req, res) => {\n  const {\n    title,\n    body,\n  } = req.body\n\n  const authorId = req.user.id\n\n  const newPost = new Post({\n    title,\n    body,\n    authorId\n  })\n\n  // Save new post\n  newPost\n    .save()\n    .then( savePost => {\n      res.json(savePost)\n    })\n    .catch( err => {\n      res.status(400).json({ msg: 'Error saving post' })\n    })\n})\n\n// @route   GET /api/posts/user\n// @desc    Get array of posts by user\n// @access  Private\nrouter.get('/user', auth, (req, res) => {\n  Post.find({ authorId: req.user.id })\n    .exec((err, returnedPosts) => {\n      if (err) {\n        res.end(err)\n      }\n      res.json(returnedPosts)\n    })\n})\n\n// @route   DELETE /api/posts/:id\n// @desc    Delete post\n// @access  Private\nrouter.delete('/:id', auth, (req, res) => {\n  Post\n    .deleteOne({ _id: req.params.id })\n    .then(res => res.json({ success: true }))\n    .catch(err => res.json({ success: false }))\n})\n\n// @route   PATCH /api/posts/edit\n// @desc    Edit post\n// @access  Public\nrouter.patch('/edit', auth, (req, res) => {\n  Post\n    .findByIdAndUpdate(\n      req.body._id,\n      { title: req.body.title, body: req.body.body },\n      { new: true }\n    )\n    .then(updatedPost => {\n      res.json(updatedPost)\n    })\n    .catch(err => res.status(400).json({ msg: 'Error updating post' }))\n})\n\nmodule.exports = router\n","const mongoose = require('mongoose')\nconst Schema = mongoose.Schema\n\nlet PostSchema = new Schema({\n  authorId: {\n    type: String,\n    required: true\n  },\n  title: {\n    type: String,\n    required: true,\n  },\n  body: {\n    type: String,\n    maxlength: 5000,\n    required: true\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n})\n\nmodule.exports = Post = mongoose.model('post', PostSchema)\n"],"sourceRoot":""}